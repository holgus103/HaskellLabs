
==================== FINAL INTERFACE ====================
2018-04-06 09:03:09.016557117 UTC

interface main:Main 8022
  interface hash: 1dccc0d8833bc2bad13d6e7b07212bbc
  ABI hash: 90dbc992358a0779680b1774bf249992
  export-list hash: 59042611dbb9c0ef7735297d28a94865
  orphan hash: e8f3ea89d06263a81d087a66314d4ddf
  flag hash: cae501f05eb9ccd043d385075d047208
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.ask
  Main.commands
  Main.deletePhoneCommand
  Main.findByPrefix
  Main.findPhoneCommand
  Main.main
  Main.mainLoop
  Main.processCommand
  Main.readCommand
  Main.storePhone
  Main.storePhoneCommand
  Main.unknownCommand
  Main.Name
  Main.Phone
  Main.StIO
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0*
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 transformers-0.5.2.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.IO.Exception c72758923693d771268bed5d3d52443d
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Environment c9f912affeed5beb387a8c5d2b2c6102
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:System.IO.Error 93d92b7da56c5ff8e1a9c831cb2a2e3f
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  containers-0.5.10.2:Data.Map.Internal 33ddbf5aa8c0f2ab26fb6dc5be1b1f4c
import  -/  containers-0.5.10.2:Data.Map.Strict 194f5b0a9785a91a43562790aa6787fc
import  -/  containers-0.5.10.2:Data.Map.Strict.Internal 63726a19357ba6ce3637c9bcf7d38b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Class 4bfa8c2d5ed6a6a465f9f6f92f7ab1d4
import  -/  transformers-0.5.2.0:Control.Monad.Trans.State.Strict 75b42d4f40e4577d37cfb92f2a6e8ec3
b7315d3a16a94cdf70162b418c835482
  $sdelete_$sgo13 ::
    GHC.Base.String
    -> Data.Map.Internal.Map GHC.Base.String a1
    -> Data.Map.Internal.Map GHC.Base.String a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e24d679a79a3264120bbaf8d080fac3d
  $sfindWithDefault ::
    a
    -> GHC.Base.String -> Data.Map.Internal.Map GHC.Base.String a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   (def :: a)
                   (k1 :: GHC.Base.String)
                   (eta :: Data.Map.Internal.Map GHC.Base.String a) ->
                 case k1 of k2 { DEFAULT ->
                 letrec {
                   go8 :: Data.Map.Internal.Map GHC.Base.String a -> a
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: Data.Map.Internal.Map GHC.Base.String a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 k2 kx of wild1 {
                            GHC.Types.LT -> go8 l GHC.Types.EQ -> x GHC.Types.GT -> go8 r }
                       Data.Map.Internal.Tip -> def }
                 } in
                 go8 eta }) -}
a4529a9afb61e62ccd89f470f21f5408
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Char], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Main.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } } }) -}
c96413ef6c882ef4e4e56278b245b07f
  $sfromList1 ::
    Data.Map.Internal.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e8004bd7e01186d32aa62d01fa186a40
  $sinsert_$sgo8 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6c4fd37659ae6ca9b7560d8756da7746
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
0cb4715245345a7e5e881fef68fcbd27
  type Name = GHC.Base.String
287fde866b23bb5d017cdb186ec0c743
  type Phone = GHC.Base.String
a4fd43525012ad388c72891b2f849a84
  type StIO a =
    Control.Monad.Trans.State.Strict.StateT
      (Data.Map.Internal.Map Main.Name Main.Phone) GHC.Types.IO a
aa632ae60b73f99136767bc3c7516822
  ask :: GHC.Base.String -> Main.StIO GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.ask1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <(GHC.Base.String,
                                           Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                    <GHC.Types.IO>_R
                                    <GHC.Base.String>_N))) -}
c68625d39ebeec02e9601917c3ef35eb
  ask1 ::
    GHC.Base.String
    -> Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 3, Strictness: <L,1*U><L,U><S,U>,
     Unfolding: (\ (prompt :: GHC.Base.String)
                   (eta :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        prompt
                        GHC.Types.True
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, (ipv3, eta) #) } }) -}
732558ea0514bdce99c768327fa3c0a9
  commands ::
    Data.Map.Internal.Map GHC.Base.String (Main.StIO GHC.Types.Bool)
  {- Unfolding: (Main.$sfromList
                   @ (Control.Monad.Trans.State.Strict.StateT
                        (Data.Map.Internal.Map Main.Name Main.Phone)
                        GHC.Types.IO
                        GHC.Types.Bool)
                   Main.commands1) -}
3710e59f4fe007bf6cbc3d05ed19106b
  commands1 ::
    [([GHC.Types.Char],
      Control.Monad.Trans.State.Strict.StateT
        (Data.Map.Internal.Map Main.Name Main.Phone)
        GHC.Types.IO
        GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      Control.Monad.Trans.State.Strict.StateT
                        (Data.Map.Internal.Map Main.Name Main.Phone)
                        GHC.Types.IO
                        GHC.Types.Bool)
                   Main.commands25
                   Main.commands2) -}
0bc08da63ebdc3e433a0e3d8e40fceff
  commands10 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.commands11 s1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 (# ipv, (GHC.Types.True, s') #) } }) -}
5301424986cfb21e99ab70cc2e06e716
  commands11 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.commands12
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.$sdelete_$sgo13
                        @ [GHC.Types.Char]
                        ipv3
                        s1 of vx { DEFAULT ->
                 (# ipv2, (GHC.Tuple.(), vx) #) } } }) -}
c8b41ce19a1a996339594050e7d2d5cc
  commands12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands13) -}
836115b5e2655a80fb48516820848ccd
  commands13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Name?"#) -}
ebe44ad958e4b4a1940438b01f405f87
  commands14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands15) -}
0ab724e611b69bbd41647100fb689f50
  commands15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("delete"#) -}
51443bc427c1d7f2ad753f105ca15529
  commands16 ::
    ([GHC.Types.Char],
     Control.Monad.Trans.State.Strict.StateT
       (Data.Map.Internal.Map Main.Name Main.Phone)
       GHC.Types.IO
       GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.commands23,
                  Main.commands17
                    `cast`
                  (Trans
                       (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(GHC.Types.Bool,
                                        Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                       (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                 <GHC.Types.IO>_R
                                 <GHC.Types.Bool>_N))))) -}
0fbe5965d89982bad64ebf7274fd171c
  commands17 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.commands18 s1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 (# ipv, (GHC.Types.True, s') #) } }) -}
d7ddac9c2562e153925ce51cea4e3819
  commands18 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.commands21
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.commands20 ipv3 s1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild { (,) a1 s' ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Show.showList__
                           @ ([GHC.Types.Char], [GHC.Types.Char])
                           Main.commands19
                           a1
                           (GHC.Types.[] @ GHC.Types.Char))
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6, (ipv7, s') #) } } } } }) -}
8b9c45f7b8f6e6b19774a1c36e4b6b91
  commands19 ::
    ([GHC.Types.Char], [GHC.Types.Char]) -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ([GHC.Types.Char], [GHC.Types.Char]))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         ww1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.$fShow(,)3
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__1
                               (GHC.Show.$fShow(,)_$sgo1
                                  (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                                  (GHC.Show.$fShowChar_$cshowList ww2)
                                  (GHC.Types.[] @ GHC.Show.ShowS)))))) }) -}
e250891dc2e893ae4354a4b310d4eabe
  commands2 ::
    [([GHC.Types.Char],
      Control.Monad.Trans.State.Strict.StateT
        (Data.Map.Internal.Map Main.Name Main.Phone)
        GHC.Types.IO
        GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      Control.Monad.Trans.State.Strict.StateT
                        (Data.Map.Internal.Map Main.Name Main.Phone)
                        GHC.Types.IO
                        GHC.Types.Bool)
                   Main.commands16
                   Main.commands3) -}
ab0197330522fdb5f7d013104d69a697
  commands20 ::
    Main.Name
    -> Data.Map.Internal.Map [GHC.Types.Char] Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([([GHC.Types.Char], Main.Phone)],
           Data.Map.Internal.Map [GHC.Types.Char] Main.Phone) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (prefix :: Main.Name)
                   (eta :: Data.Map.Internal.Map [GHC.Types.Char] Main.Phone)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (letrec {
                       go13 :: [([GHC.Types.Char], Main.Phone)]
                               -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Types.Char]
                               -> [([GHC.Types.Char], Main.Phone)]
                         {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                       = \ (z' :: [([GHC.Types.Char], Main.Phone)])
                           (ds :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Types.Char]) ->
                         case ds of wild {
                           Data.Map.Internal.Bin dt kx x l r
                           -> go13
                                (case Data.OldList.isPrefixOf
                                        @ GHC.Types.Char
                                        GHC.Classes.$fEqChar
                                        prefix
                                        kx of wild1 {
                                   GHC.Types.False -> go13 z' r
                                   GHC.Types.True
                                   -> GHC.Types.:
                                        @ ([GHC.Types.Char], Main.Phone)
                                        (kx, x)
                                        (go13 z' r) })
                                l
                           Data.Map.Internal.Tip -> z' }
                     } in
                     go13 (GHC.Types.[] @ ([GHC.Types.Char], Main.Phone)) eta,
                     eta) #)) -}
ca156fe2f2e2fe977d01f2411ed044ce
  commands21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands22) -}
f77607d7488e47982567e48f2f3fe3e1
  commands22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Name prefix?"#) -}
da74563a30999975d092fc1683e2e8d6
  commands23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands24) -}
0b44a87fdbc7da6cdf33161c9012142e
  commands24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("find"#) -}
4cefb2382ebfb8afcd05296aa6b48f93
  commands25 ::
    ([GHC.Types.Char],
     Control.Monad.Trans.State.Strict.StateT
       (Data.Map.Internal.Map Main.Name Main.Phone)
       GHC.Types.IO
       GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.commands31,
                  Main.commands26
                    `cast`
                  (Trans
                       (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(GHC.Types.Bool,
                                        Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                       (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                 <GHC.Types.IO>_R
                                 <GHC.Types.Bool>_N))))) -}
8eedac2cb0dd6a63f654a066ac02e76b
  commands26 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.commands27 s1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 (# ipv, (GHC.Types.True, s') #) } }) -}
81294c72b703aca7dbacc0e15cceb985
  commands27 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.commands12
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.commands29
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 Main.commands28 ipv3 ipv7 s1 ipv6 } } } }) -}
625d1812891069c5e92cab2783e07e9e
  commands28 ::
    Main.Name
    -> Main.Phone
    -> Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 4, Strictness: <S,1*U><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (name :: Main.Name)
                   (phone :: Main.Phone)
                   (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.$sinsert_$sgo8
                        @ [GHC.Types.Char]
                        name
                        phone
                        s1 of vx { DEFAULT ->
                 (# s, (GHC.Tuple.(), vx) #) }) -}
6a3382d738728f780688ca0561ef9e91
  commands29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands30) -}
2d1c8506950163f459730e84d0b76fac
  commands3 ::
    [([GHC.Types.Char],
      Control.Monad.Trans.State.Strict.StateT
        (Data.Map.Internal.Map Main.Name Main.Phone)
        GHC.Types.IO
        GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      Control.Monad.Trans.State.Strict.StateT
                        (Data.Map.Internal.Map Main.Name Main.Phone)
                        GHC.Types.IO
                        GHC.Types.Bool)
                   Main.commands9
                   Main.commands4) -}
f8129ed65547384db0b92aaecf0706d6
  commands30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Phone?"#) -}
5483bdecf29fec5c6933bdec3b37c544
  commands31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands32) -}
58d8e362feb086addf2cabdbac9ddd40
  commands32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("add"#) -}
175c4863cfe7f6e6bd5c65bfcb33ebc6
  commands4 ::
    [([GHC.Types.Char],
      Control.Monad.Trans.State.Strict.StateT
        (Data.Map.Internal.Map Main.Name Main.Phone)
        GHC.Types.IO
        GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      Control.Monad.Trans.State.Strict.StateT
                        (Data.Map.Internal.Map Main.Name Main.Phone)
                        GHC.Types.IO
                        GHC.Types.Bool)
                   Main.commands5
                   (GHC.Types.[]
                      @ ([GHC.Types.Char],
                         Control.Monad.Trans.State.Strict.StateT
                           (Data.Map.Internal.Map Main.Name Main.Phone)
                           GHC.Types.IO
                           GHC.Types.Bool))) -}
b4d652a503e96d4d52980073d51162ad
  commands5 ::
    ([GHC.Types.Char],
     Control.Monad.Trans.State.Strict.StateT
       (Data.Map.Internal.Map Main.Name Main.Phone)
       GHC.Types.IO
       GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.commands7,
                  Main.commands6
                    `cast`
                  (Trans
                       (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(GHC.Types.Bool,
                                        Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                       (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                 <GHC.Types.IO>_R
                                 <GHC.Types.Bool>_N))))) -}
3c23efc9b37dfed46d01d3780caeeb0c
  commands6 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: (\ (eta1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (GHC.Types.False, eta1) #)) -}
08d863f95798a8ac84ed76565ce0cc9a
  commands7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.commands8) -}
58c3ad26f68c7f4fdccfd185078bdd64
  commands8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exit"#) -}
5fecbe1a3d0f230ae5b6b2cc7b90b3d4
  commands9 ::
    ([GHC.Types.Char],
     Control.Monad.Trans.State.Strict.StateT
       (Data.Map.Internal.Map Main.Name Main.Phone)
       GHC.Types.IO
       GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.commands14,
                  Main.commands10
                    `cast`
                  (Trans
                       (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(GHC.Types.Bool,
                                        Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                       (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                 <GHC.Types.IO>_R
                                 <GHC.Types.Bool>_N))))) -}
fd13faaa1fc2f5616e06d66ef96ec6b7
  deletePhoneCommand :: Main.StIO ()
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.commands11
                  `cast`
                (Trans
                     (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <((), Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                     (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Data.Map.Internal.Map Main.Name Main.Phone>_N
                               <GHC.Types.IO>_R
                               <()>_N))) -}
f130ee22610e4354282dceb763aab7ac
  findByPrefix :: Main.Name -> Main.StIO [(Main.Name, Main.Phone)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.commands20
                  `cast`
                (<Main.Name>_R
                 ->_R Trans
                          (<Data.Map.Internal.Map [GHC.Types.Char] Main.Phone>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <([([GHC.Types.Char], Main.Phone)],
                                           Data.Map.Internal.Map [GHC.Types.Char] Main.Phone)>_R))
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Data.Map.Internal.Map [GHC.Types.Char] Main.Phone>_N
                                    <GHC.Types.IO>_R
                                    <[([GHC.Types.Char], Main.Phone)]>_N))) -}
80b9765223d3e371175d572e59ccffb2
  findPhoneCommand :: Main.StIO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.commands18
                  `cast`
                (Trans
                     (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <((), Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                     (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Data.Map.Internal.Map Main.Name Main.Phone>_N
                               <GHC.Types.IO>_R
                               <()>_N))) -}
735e055d63f9c651c380b4ce2568ab7a
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5178cf0df3daf6b2e906dc8d0730c9f4
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> (GHC.Magic.noinline
                         @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                         GHC.IO.failIO1
                           `cast`
                         (forall (a :: <*>_N).
                          <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         @ ()
                         Main.main7)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv
                   : file ds
                   -> case GHC.Prim.catch#
                             @ (Data.Map.Internal.Map Main.Name Main.Phone)
                             @ GHC.Exception.SomeException
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.IO.Handle.FD.openFile1
                                     file
                                     GHC.IO.IOMode.ReadMode
                                     s1 of ds2 { (#,#) ipv2 ipv3 ->
                              case GHC.IO.Handle.Text.hGetContents1
                                     ipv3
                                     ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                              case Text.Read.readEither8
                                     @ (Data.Map.Internal.Map Main.Name Main.Phone)
                                     (Text.ParserCombinators.ReadP.run
                                        @ (Data.Map.Internal.Map Main.Name Main.Phone)
                                        Main.main6
                                        ipv5) of wild1 {
                                []
                                -> case Main.main5
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Map.Internal.Map Main.Name Main.Phone #)
                                   of {}
                                : x ds4
                                -> case ds4 of wild2 {
                                     []
                                     -> case x of z { DEFAULT ->
                                        case GHC.IO.Handle.Text.hPutStr2
                                               GHC.IO.Handle.FD.stdout
                                               (Data.Map.Internal.$w$cshowsPrec
                                                  @ [GHC.Types.Char]
                                                  @ [GHC.Types.Char]
                                                  GHC.Show.$fShow[]_$s$fShow[]1
                                                  GHC.Show.$fShow[]_$s$fShow[]1
                                                  0#
                                                  z
                                                  (GHC.Types.[] @ GHC.Types.Char))
                                               GHC.Types.True
                                               ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                                        (# ipv6, z #) } }
                                     : ipv6 ipv7
                                     -> case Main.main4
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Map.Internal.Map Main.Name Main.Phone #)
                                        of {} } } } })
                             Main.main3
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case Main.main2 ipv3 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case ipv5 of wild1 { (,) ds4 s' ->
                      System.IO.appendFile2
                        @ ()
                        file
                        GHC.IO.IOMode.WriteMode
                        (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                         GHC.IO.Handle.Text.hPutStr2
                           hdl
                           (Data.Map.Internal.$w$cshowsPrec
                              @ [GHC.Types.Char]
                              @ [GHC.Types.Char]
                              GHC.Show.$fShow[]_$s$fShow[]1
                              GHC.Show.$fShow[]_$s$fShow[]1
                              0#
                              s'
                              (GHC.Types.[] @ GHC.Types.Char))
                           GHC.Types.False)
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4 } } } } }) -}
abc8258810ccd7692f8be4381fdf5bb4
  main2 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
2b239df2d9011f4f423115a6e42a2e58
  main3 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Map.Internal.Map Main.Name Main.Phone #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.eqTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Base.Nothing
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (Data.Map.Internal.Map Main.Name Main.Phone)
                        wild
                        eta
                   GHC.Base.Just ds1
                   -> case ds1 of wild2 { Data.Type.Equality.HRefl cobox cobox1 ->
                      case e3
                             `cast`
                           (Sub (Sym cobox1)) of wild4 { GHC.IO.Exception.IOError ds2 ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild5 {
                        DEFAULT
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (Data.Map.Internal.Map Main.Name Main.Phone)
                             (GHC.IO.Exception.$fExceptionIOException_$ctoException wild4)
                             eta
                        GHC.IO.Exception.NoSuchThing
                        -> (# eta,
                              Data.Map.Internal.Tip @ Main.Name @ Main.Phone #) } } } } }) -}
273081e5d81b99a2775241d2c4a59551
  main4 :: Data.Map.Internal.Map Main.Name Main.Phone
  {- Strictness: x -}
d76d588c60edbe08380c9719d582bda1
  main5 :: Data.Map.Internal.Map Main.Name Main.Phone
  {- Strictness: x -}
885eb3129c66b7e3169703c7982db4d3
  main6 ::
    Text.ParserCombinators.ReadP.P
      (Data.Map.Internal.Map Main.Name Main.Phone)
  {- Unfolding: (Data.Map.Internal.$fReadMap1
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   GHC.Classes.$fOrd[]_$s$fOrd[]1
                   GHC.Read.$fRead[]_$s$fRead[]1
                   GHC.Read.$fRead[]_$s$fRead[]1
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ (Data.Map.Internal.Map Main.Name Main.Phone)
                   (Text.Read.readEither7
                      @ (Data.Map.Internal.Map Main.Name Main.Phone))) -}
3c7658d142bcb3b978189f23902afb7d
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
b7bb048f866cb2bd2d8589b99123603c
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/Main.hs:72:3-10"#) -}
7874e2d1db2a5c70dd06385a981c245e
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
edf1ba27d4648952cafcc18fe930ee9b
  mainLoop :: Main.StIO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (Trans
                     (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <((), Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                     (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Data.Map.Internal.Map Main.Name Main.Phone>_N
                               <GHC.Types.IO>_R
                               <()>_N))) -}
989a7161d92452f8c0f2c82577618518
  processCommand :: GHC.Base.String -> Main.StIO GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cmd :: GHC.Base.String) ->
                 Main.$sfindWithDefault
                   @ (Control.Monad.Trans.State.Strict.StateT
                        (Data.Map.Internal.Map Main.Name Main.Phone)
                        GHC.Types.IO
                        GHC.Types.Bool)
                   Main.processCommand1
                     `cast`
                   (Trans
                        (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(GHC.Types.Bool,
                                         Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                        (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                  <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                  <GHC.Types.IO>_R
                                  <GHC.Types.Bool>_N)))
                   cmd
                   Main.commands) -}
5a6837116b88ee3d44b23e31224bef66
  processCommand1 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.processCommand2
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, (GHC.Types.True, s1) #) }) -}
7db840819eaa533228ae83686c2b37a2
  processCommand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.processCommand3) -}
9aa4c4198347da7063c13790e9c3d878
  processCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unknown command"#) -}
405816a8f70f104e9c358958263482c5
  readCommand :: Main.StIO GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.readCommand1
                  `cast`
                (Trans
                     (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Types.Bool,
                                      Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                     (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Data.Map.Internal.Map Main.Name Main.Phone>_N
                               <GHC.Types.IO>_R
                               <GHC.Types.Bool>_N))) -}
43b4ed084d121ae0efc501421af67637
  readCommand1 ::
    Data.Map.Internal.Map Main.Name Main.Phone
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone) #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (s1 :: Data.Map.Internal.Map Main.Name Main.Phone)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 ((Main.$sfindWithDefault
                     @ (Control.Monad.Trans.State.Strict.StateT
                          (Data.Map.Internal.Map Main.Name Main.Phone)
                          GHC.Types.IO
                          GHC.Types.Bool)
                     Main.processCommand1
                       `cast`
                     (Trans
                          (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <(GHC.Types.Bool,
                                           Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                    <GHC.Types.IO>_R
                                    <GHC.Types.Bool>_N)))
                     ipv1
                     Main.commands)
                    `cast`
                  (Control.Monad.Trans.State.Strict.N:StateT[0]
                       <Data.Map.Internal.Map Main.Name Main.Phone>_N
                       <GHC.Types.IO>_R
                       <GHC.Types.Bool>_N)
                    s1)
                   `cast`
                 (GHC.Types.N:IO[0]
                      <(GHC.Types.Bool, Data.Map.Internal.Map Main.Name Main.Phone)>_R)
                   ipv }) -}
a74cf59720f1018e0344f23cefe0b02a
  storePhone :: Main.Name -> Main.Phone -> Main.StIO ()
  {- Arity: 4, Strictness: <S,1*U><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.commands28
                  `cast`
                (<Main.Name>_R
                 ->_R <Main.Phone>_R
                 ->_R Trans
                          (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <((), Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                          (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <Data.Map.Internal.Map Main.Name Main.Phone>_N
                                    <GHC.Types.IO>_R
                                    <()>_N))) -}
0171186b15780c2e136318dbd5c2617a
  storePhoneCommand :: Main.StIO ()
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.commands27
                  `cast`
                (Trans
                     (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <((), Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                     (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Data.Map.Internal.Map Main.Name Main.Phone>_N
                               <GHC.Types.IO>_R
                               <()>_N))) -}
894f4cf5dc7a2ae0f236040f89839c1b
  unknownCommand :: Main.StIO GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.processCommand1
                  `cast`
                (Trans
                     (<Data.Map.Internal.Map Main.Name Main.Phone>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <(GHC.Types.Bool,
                                      Data.Map.Internal.Map Main.Name Main.Phone)>_R))
                     (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <Data.Map.Internal.Map Main.Name Main.Phone>_N
                               <GHC.Types.IO>_R
                               <GHC.Types.Bool>_N))) -}
"SPEC/Main findWithDefault @ String _" [orphan] forall @ a
                                                       ($dOrd :: GHC.Classes.Ord GHC.Base.String)
  Data.Map.Strict.Internal.findWithDefault @ [GHC.Types.Char]
                                           @ a
                                           $dOrd
  = Main.$sfindWithDefault @ a
"SPEC/Main fromList @ [Char] _" [orphan] forall @ a
                                                ($dOrd :: GHC.Classes.Ord [GHC.Types.Char])
  Data.Map.Strict.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

